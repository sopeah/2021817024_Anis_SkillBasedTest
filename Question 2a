#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <time.h>

#define S_PORT 8443

int main() {
    int s_socket, c_socket, random_num;
    struct sockaddr_in s_add, c_add;
    socklen_t c_add_len = sizeof(c_add);

    // Create socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Prepare server address structure
    s_add.sin_family = AF_INET;
    s_add.sin_addr.s_addr = INADDR_ANY;
    s_add.sin_port = htons(S_PORT);

    // Bind socket to the specified IP and port
    if (bind(s_socket, (struct sockaddr*)&s_add, sizeof(s_add)) == -1) {
        perror("Error binding socket");
        close(s_socket);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(s_socket, 1) == -1) {
        perror("Error listening");
        close(s_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", S_PORT);

    // Accept incoming connection
    c_socket = accept(s_socket, (struct sockaddr*)&c_add, &c_add_len);
    if (c_socket == -1) {
        perror("Error accepting connection");
        close(s_socket);
        exit(EXIT_FAILURE);
    }

    // Generate a random number between 100 and 999
    srand(time(NULL));
    random_num = rand() % 900 + 100;

    // Send the random number to the client
    send(c_socket, &random_num, sizeof(random_num), 0);

    printf("Random number sent to the client: %d\n", random_num);

    // Close the sockets and exit
    close(c_socket);
    close(s_socket);
    return 0;
}
